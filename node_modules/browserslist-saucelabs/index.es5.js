// jshint esnext: true
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _browserslist = require('browserslist');

var _browserslist2 = _interopRequireDefault(_browserslist);

var _lodash = require('lodash');

var _dataJson = require('./data.json');

var _dataJson2 = _interopRequireDefault(_dataJson);

var _utilsSortEs5 = require('./utils/sort.es5');

var _utilsSortEs52 = _interopRequireDefault(_utilsSortEs5);

var BROWSERS_NAMES = {
    ie: 'Internet Explorer',
    android: 'Android',
    chrome: 'Chrome',
    firefox: 'Firefox',
    safari: 'Safari',
    opera: 'Opera',
    edge: 'MicrosoftEdge',
    // Special case, since for browserslist there is no difference
    // but for us there is
    ios_saf: ['iPhone', 'iPad'],
    // following ones are not yet supported by saucelabs
    ie_mob: 'Internet Explorer Mobile',
    bb: 'Blackberry',
    and_chr: 'Android Chrome',
    and_ff: 'Android Firefox',
    and_uc: 'Android UC'
};

var getCapabilities = function getCapabilities(names, version) {
    return (0, _lodash.flatten)((0, _lodash.flatten)([names]).map(function (n) {
        return (0, _lodash.where)(_dataJson2['default'], { browserName: n, version: version });
    }));
};

var normalizeVersion = function normalizeVersion(_ref) {
    var version = _ref.version;
    var name = _ref.name;

    // FIXME special case for ms edge
    // https://github.com/Fyrd/caniuse/issues/1822
    // so browser reports version 20 and on sauce labs it's 20
    // but caniuse guys use UA string where it says it is in fact version 12
    // (while common sense tells me that it is version 1 but anyways)
    // we'll see how things turn out eventually but for now:
    // ¯\_(ツ)_/¯
    if (name === 'edge' && version === '12') {
        version = '20.10240';
    }

    // there could be version ranges.
    // in this case we take the beginning of the range
    // because it is most likely is going to exist on saucelabs
    // e.g. they don't have ios8.3 yet
    return version.split('-')[0] || version;
};

var normalizeName = function normalizeName(name) {
    return BROWSERS_NAMES[name] || name;
};

exports['default'] = function () {
    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var browsers = _ref2.browsers;
    var _ref2$allPlatforms = _ref2.allPlatforms;
    var allPlatforms = _ref2$allPlatforms === undefined ? false : _ref2$allPlatforms;

    browsers = (0, _browserslist2['default'])(browsers);

    var capabilities = browsers.map(function (browser) {
        var _browser$split = browser.split(' ');

        var _browser$split2 = _slicedToArray(_browser$split, 2);

        var name = _browser$split2[0];
        var version = _browser$split2[1];

        version = normalizeVersion({ version: version, name: name });
        name = normalizeName(name);

        var capabilities = getCapabilities(name, version);

        if (!allPlatforms) {
            return capabilities[0];
        }

        return capabilities;
    });

    return (0, _lodash.compact)((0, _lodash.flatten)(capabilities)).sort(function (a, b) {
        var nameSort = (0, _utilsSortEs52['default'])(a.browserName, b.browserName),
            versionSort = (0, _utilsSortEs52['default'])(a.version, b.version),
            platformSort = (0, _utilsSortEs52['default'])(a.platform, b.platform);
        if (nameSort !== 0) {
            return -nameSort;
        } else if (versionSort !== 0) {
            return -versionSort;
        } else {
            return -platformSort;
        }
    });
};

module.exports = exports['default'];

